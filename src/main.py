import json
import logging
import os
from textwrap import dedent

from fastapi import Request
from fastapi.responses import JSONResponse
from github import Github, GithubException
from pydantic import BaseModel, ValidationError
from slugify import slugify
from utils import extract_payload_data, generate_data_file, update_pr_body, assert_throws, compare_line_by_line, extract_pr_body

logger = logging.getLogger(__name__)

# Constants
TARGET_REPO = os.environ["TARGET_REPO"]
TARGET_REPO_DATA_DIR = os.environ["TARGET_REPO_DATA_DIR"]
GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
BRANCH_PREFIX = "user-ingestion-"
MAX_BRANCH_NAME_LENGTH = 255
MAX_FILE_NAME_LENGTH = 255

# Models
class IngestPayload(BaseModel):
    data: dict  # Flexible JSON data structure

async def main(request: Request):
    try:
        # MARK: Parse and validate payload
        try:
            data = await request.body()
            payload = IngestPayload(**json.loads(data))
            username, primary_email = extract_payload_data(payload)
        except (json.JSONDecodeError, ValidationError, ValueError) as e:
            return JSONResponse(
                status_code=400,
                content={"error": "Invalid payload", "details": str(e)}
            )

        # MARK: Prepare file content
        file_path = f"{TARGET_REPO_DATA_DIR}/{slugify(username, max_length=MAX_FILE_NAME_LENGTH)}.yml"
        file_content = generate_data_file(payload.data)

        # MARK: Initialize GitHub client
        g = Github(GITHUB_TOKEN)
        repo = g.get_repo(TARGET_REPO)
        default_branch = repo.get_branch(repo.default_branch)
        branch_name = slugify(f"{BRANCH_PREFIX}{username}", max_length=MAX_BRANCH_NAME_LENGTH)

        logger.info(f"GitHub rate limit remaining: {g.rate_limiting[0]} / {g.rate_limiting[1]}")

        # MARK: Create or update branch
        logger.info(f"Creating branch {branch_name} from {default_branch.commit.sha}")
        try:
            repo.create_git_ref(f"refs/heads/{branch_name}", default_branch.commit.sha)
        except GithubException as e:
            if e.status != 422:  # 422 means branch already exists
                raise e
            logger.info(f"Branch {branch_name} already exists")

        # MARK: Create or update file
        try:
            existing_file = repo.get_contents(file_path, ref=branch_name)
            if existing_file.decoded_content.decode("utf-8") == file_content:
                logger.info(f"File {file_path} already up to date")
            else:
                logger.info(f"Updating file {file_path}...")
                repo.update_file(
                    file_path,
                    f"Update user `{username}`",
                    file_content,
                    existing_file.sha,
                    branch=branch_name
                )
        except GithubException as e:
            if e.status != 404:  # 404 means file doesn't exist
                raise e
            existing_file = None
            logger.info(f"Creating file {file_path}...")
            repo.create_file(
                file_path,
                f"Create user `{username}`",
                file_content,
                branch=branch_name
            )

        # MARK: Create PR
        org_login = (
            repo.organization.login 
            if hasattr(repo, "organization") and repo.organization 
            else repo.owner.login
        )
        pr_head = f"{org_login}:{branch_name}"
        pr_title = f"Update user `{username}`" if existing_file else f"Create user `{username}`"
        
        pr_body = dedent(f"""
            ### Introduction

            This PR is automatically generated by the [user-ingestion](https://github.com/WATonomous/user-ingestion) service.
            Please review the changes and complete the checklist(s) in the PR description (if present).

            <!-- tags: user-ingestion -->
        """)
        
        try:
            prs = repo.get_pulls(head=pr_head, base=default_branch.name)
            pr = prs[0]
            assert_throws(lambda: prs[1], IndexError, f"Expected only one PR from {pr_head} to {default_branch.name}, but found more than one")
            if pr.title == pr_title and compare_line_by_line(extract_pr_body(pr.body).strip(), pr_body.strip()):
                logger.info(f"PR from {pr_head} to {default_branch.name} already exists (#{pr.number}) and is up to date")
            else:
                logger.info(f"PR from {pr_head} to {default_branch.name} already exists (#{pr.number}) but is out of date. Updating...")
                pr.edit(title=pr_title, body=update_pr_body(pr.body, pr_body))
                pr.add_to_labels("user-ingestion")
        except IndexError:
            logger.info(f"PR from {pr_head} to {default_branch.name} does not exist. Creating...")
            pr = repo.create_pull(
                title=pr_title,
                body=update_pr_body("", pr_body),
                head=pr_head,
                base=default_branch.name
            )
            pr.add_to_labels("user-ingestion")

        logger.info(f"GitHub rate limit remaining: {g.rate_limiting[0]} / {g.rate_limiting[1]}")

        return JSONResponse(
            status_code=200,
            content={"pr_url": pr.html_url}
        )
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"error": "Ingestion failed", "details": str(e)}
        )
